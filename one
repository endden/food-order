/*
QUICKSORT

#include<bits/stdc++.h>

using namespace std;

int t;

int partition(int A[],int lb, int ub){

	int pivot=A[lb];

	int start=lb;

	int end =ub;

while(start<end){

	while(A[start] <= pivot){

    	start++;

	}

	while(A[end] > pivot){

    	end--;

	}

	if (start<end){

 

    	t=A[start];

    	A[start]=A[end];

    	A[end]=t;

	}

}

 

    	t=A[lb];

    	A[lb]=A[end];

    	A[end]=t;

 

	return end;

 

}

 

void quicksort(int A[], int lb ,int ub)

{

   int loc;

   if(lb<ub){

	loc=partition(A,lb,ub);

	quicksort(A, lb, loc-1);

	quicksort(A, loc+1, ub);

   }

}

int main()

{

    	int n=0,j=1000,k=0,i;

    	clock_t start,end;

    	while(k<100)

    	{

     	       n=j;

            	j=j+1000;

            	int A[n];

            	for(i=0;i<n;i++)

            	{

                    	A[i]=rand()%100000;

            	}

start=clock();

quicksort(A,0,n-1);

end=clock();

double d=end-start/CLOCKS_PER_SEC;

cout<<n<<" "<<d<<endl;

k=k+1;

    	}

 return 0;

}

 

 

 

 

 

 

 

 

 

 

 

MERGESORT

 

#include <bits/stdc++.h>

using namespace std;

int b[20000000];

void merge(int a[],int lb, int mid, int ub){

 

int i=lb;

int j=mid+1;

int k=lb;

 

while(i<=mid && j<=ub){

 

	if(a[i]<=a[j]){

    	b[k]=a[i];

    	i++;

    	k++;

	}

	else {

    	b[k]=a[j];

    	j++;

    	k++;

	}

}

if(i>mid){

	while(j<=ub){

    	b[k]=a[j];

    	j++;

    	k++;

	}

}

else{

    	while(i<=mid){

    	b[k]=a[i];

    	i++;

    	k++;

	}

 

}

for(i=lb;i<=ub;i++){

    	a[i]=b[i];

	}

 

}

 

void mergesort(int a[],int lb,int ub){

	int mid;

if(lb<ub){

	mid=(lb+ub)/2;

	mergesort(a,lb,mid);

	mergesort(a,mid+1,ub);

	merge(a,lb,mid,ub);

}

}

 

int main()

{

	int n=0,i;

	clock_t start,end;

	int k=0,j=1000;

	while(k<100)

	{

        	n=j;

        	j=j+1000;

        	int a[n];

        	for(i=1;i<=n;i++){

                	a[i]=rand()%100000;

        	}

        	start=clock();

        	mergesort(a,1,n);

        	end=clock();

        	double d=end-start/CLOCKS_PER_SEC;

        	cout<<n<<" "<<d<<endl;

        	k=k+1;

	}

 

	return 0;

}

 






 

KNAPSACK

 

#include <iostream>

using namespace std;

int max(int a, int b){

if(a>b)

	return a;

else

	return b;

}

void knapsack(int w,int wt[],int val[],int n){

int k[n+1][w+1];

 

for(int i=0;i<=n;i++){

	for(int j=0;j<=w;j++){

    	if(i==0||j==0){

      	  k[i][j]=0;

    	}

    	else if(wt[i-1]<=j){

            k[i][j]=max(val[i-1]+k[i-1][j-wt[i-1]] , k[i-1][j]);

    	}

    	else{

        	k[i][j]=k[i-1][j];

    	}

	}

}

cout<<"here\n"<<endl;

for(int i=0;i<=n;i++){

    	for(int j=0;j<=w;j++){

           cout<<k[i][j]<<"\t";

}

cout<<"\n";

}

int i=n,j=w;

while(i>0 && j>0){

if(k[i][j]==k[i-1][j]){

	printf("object %d =0\n",i--);

}

else{

	printf("object %d =1\n",i--);

	j=j-wt[i];

}

}

 

int main()

{

	int val[10],wt[10],n,w;

	cout << "enter the number of the items" << endl;

	cin>>n;

	cout<<"Enter the values"<<endl;

	for(int i=0;i<n;i++)

    	cin>>val[i];

	cout<<"Enter the weights"<<endl;

	for(int i=0;i<n;i++)

    	cin>>wt[i];

	cout<<"enter the capacity of the bag"<<endl;

	cin>>w;

	knapsack(w,wt,val,n);

	return 0;

}

 

 

 

SUMOFSUBSETS


#include<bits/stdc++.h>

int w[10],x[10];

using namespace std;

void sum_subset(int s, int k, int r, int d){

static int b=1;

x[k]=1;

if(s+w[k]==d){

	cout<<"SUBSET"<<b++<<endl;

	for(int i=1;i<=k;i++){

    	if(x[i]==1)

        	cout<<w[i]<<" ";

	}

	cout<<endl;

}

else if(s+w[k]+w[k+1]<=d){

	sum_subset(s+w[k],k+1,r-w[k],d);

}

if( ( (s+r-w[k])>=d)  && ((s+w[k+1])<=d ))

{

 

x[k]=0;

sum_subset(s,k+1,r-w[k],d);

}

}

 

int main()

{

	int sum=0,n,d,i,b[20];

	cout << "Enter the number of elements: " << endl;

	cin>>n;

	cout<<"enter the elements:"<<endl;

 

	for( i=0;i<n;i++){

        	cin>>w[i];

        	sum=sum+w[i];

 	   }

   	

	cout<<"enter the maximum cost:"<<endl;

	cin>>d;

	if(sum<d || w[1]>d){

    	cout<<"no solution"<<endl;

    	exit(0);

	}

	sum_subset(0,1,sum,d);

	return 0;

}

 

 

 
 
 


 

KRUSKAL

#include<bits/stdc++.h>

using namespace std;

int find(int);

int uni(int,int);

int i,j,a,b,u,v, cost[20][20],n,ne=1,minn,mincost=0,parent[10]={0};

int main(){

 

cout<<"enter the number of the vertices: "<<endl;

cin>>n;

cout<<"enter the cost of the adjacency matrices: "<<endl;

for(i=1;i<=n;i++){

	for(j=1;j<=n;j++){

    	cin>>cost[i][j];

    	if(cost[i][j]==0){

        	cost[i][j]=999;

    	}

	}

}

 

cout<<"entered adjancency matrix is: "<<endl;

for(i=1;i<=n;i++){

	for(j=1;j<=n;j++){

        cout<<cost[i][j]<<"   ";

 

	}

	cout<<endl;

}

 

cout<<"edges are"<<endl;

while(ne<n){

 for(i=1, minn=999 ; i<=n;i++){

	for(j=1;j<=n;j++){

    	if(cost[i][j]<minn){

        	minn=cost[i][j];

        	a=u=i;

        	b=v=j;

     	}

	}

}

u=find(u);

v=find(v);

if(uni(u,v)){

    cout<<ne++<< "edges("<<a<<" "<<b << ")"<<minn<<"\n";

	mincost+=minn;

}

cost[a][b]=cost[b][a]=999;

 

}

cout<<"minimum cost is "<<mincost<<endl;

 

}

 

int find(int i){

while(parent[i])

i=parent[i];

return i;

 

}

 

 

int uni(int i,int j){

 

if(i!=j){

	parent[j]=i;

	return 1;

}

return 0;

}

 

 

 

 

 

 

 

 

 

PRIMS


#include <iostream>

using namespace std;

int i,j,n,a,b,u,v,cost[10][10],ne=1,minn,visited[10]={0},mincost=0;

 

int main()

{

	cout << "enter the number of the vertices: " << endl;

	cin>>n;

	cout<<"enter the cost of the adjacency matrices: "<<endl;

	for(i=1;i<=n;i++){

    	for(j=1;j<=n;j++){

        	cin>>cost[i][j];

        	if(cost[i][j]==0){

            	cost[i][j]=999;

        	}

    	}

	}

	cout<<"displaying adjacency matrices:"<<endl;

	for(i=1;i<=n;i++){

    	for(j=1;j<=n;j++){

            cout<<cost[i][j]<<"  ";

    	}

	cout<<endl;

	}

	visited[1]=1; //source 1

	while(ne<n){

 

        for(i=1,minn=999;i<=n;i++){

    	for(j=1;j<=n;j++){

            	if(cost[i][j]<minn){

                	if(visited[i]!=0){

                    	minn=cost[i][j];

                    	a=u=i;

                    	b=v=j;

                	}

            	}

 

    	}

	}

	if(visited[u]==0 || visited[v]==0){

    	printf("\n edges %d: (%d %d) cost: %d",ne++,a,b,minn);

    	mincost+=minn;

    	visited[b]=1;

	}

	cost[a][b]=cost[b][a]=999;

	}

	cout<<"\nminimum cost is "<<mincost<<endl;

 

	return 0;

}

 

 

 

 

 

 

 

 

 

 

 

 

 


 

 

DIJKSTRAS

#include <iostream>
using namespace std;

void dij(int v, int n, int dist[], int cost[20][20]){

	int i,flag[20],w,min,count,u;

	for(i=1;i<=n;i++){

    	flag[i]=0;

    	dist[i]=cost[v][i];

	}

	count=2;

	while(count<=n){

    	for(w=1,min=999;w<=n;w++){

        	if(dist[w]<min && !flag[w]){

            	min=dist[w];

            	u=w;

        	}

 

    	}

    	flag[u]=1;

    	count++;

    	for(w=1;w<=n;w++){

            if(dist[u]+cost[u][w]<dist[w]  && !flag[w]){

            	dist[w]=dist[u]+cost[u][w];

        	}

    	}

	}

}

 

int main()

{

	int i,j,v,n,cost[20][20],dist[20];

	cout<<"Enter the number of the nodes";

	cin>>n;

	cout<<"enter the cost of the adjacency matrices: "<<endl;

	for(i=1;i<=n;i++){

    	for(j=1;j<=n;j++){

        	cin>>cost[i][j];

        	if(cost[i][j]==0){

            	cost[i][j]=999;

        	}

    	}

	}

	cout<<"enter the source vertex:"<<endl;

	cin>>v;

	dij(v,n,dist,cost);

	for(i=1;i<=n;i++){

    	if(i!=v){

        	printf("edges %d, %d = %d ", v,i,dist[i]);

    	}

	}

 

	return 0;

}

 

 

 

 

 

 

 

 


TOPOLOGICAL
 

#include<iostream>

using namespace std;

void findindegree(int [10][10],int[10],int);

void topological(int,int [10][10]);

int main()

{

        	int a[10][10],i,j,n;

        	cout<<"Enter the number of nodes:";

        	cin>>n;

        	cout<<"\nEnter the adjacency matrix\n";

        	for(i=1;i<=n;i++)

        	for(j=1;j<=n;j++)

        	cin>>a[i][j];

        	cout<<"\nThe adjacency matirx is:\n";

        	for(i=1;i<=n;i++)

        	{

        	for(j=1;j<=n;j++)

        	{

  	      cout<<a[i][j]<<"\t";

        	}

        	cout<<"\n";

        	}

        	topological(n,a);

}

 

	void findindegree(int a[10][10],int indegree[10],int n)

        	{

        	int i,j,sum;

        	for(j=1;j<=n;j++)

        	{

            sum=0;

        	for(i=1;i<=n;i++)

        	{

        	sum=sum+a[i][j];

        	}

        	indegree[j]=sum;

        	}

	}

 

void topological(int n,int a[10][10])

{

    	int k,top,t[100],i,stack[20],u,v,indegree[20];

    	k=1;

    	top=-1;

    	findindegree(a,indegree,n);

    	for(i=1;i<=n;i++)

    	{

        	if(indegree[i]==0)

        	{

        	stack[++top]=i;

        	}

    	}

    	while(top!=-1)

        	{

        	u=stack[top--];

        	t[k++]=u;

        	for(v=1;v<=n;v++)

        	{

            	if(a[u][v]==1)

            	{

            	indegree[v]--;

            	if(indegree[v]==0)

            	{

            	stack[++top]=v;

            	}

            	}

        	}

        	}

    	cout<<"\nTopological sequence is\n";

    	for(i=1;i<=n;i++)

    	cout<<t[i]<<"\t";

}

 

 

 

 




WARSHALL

 
#include <iostream>
using namespace std;

int a[20][20], d[20][20],i,j,n,k;

void warshall(int a[20][20],int n){

for(i=1;i<=n;i++){

    	for(j=1;j<=n;j++){

        	d[i][j]=a[i][j];

    	}

	}                                                                                      	

 

	for(k=1;k<=n;k++){

 	for(j=1;j<=n;j++){

    	for(i=1;i<=n;i++){

        	if(d[i][j]==0 && d[i][k]==1 && d[k][j]==1 ){

            	d[i][j]=1;

        	}

    	}

	}

	}

	cout<<"transitive closure of matrix is : "<<endl;

	for(i=1;i<=n;i++){

    	for(j=1;j<=n;j++){

        	cout<<d[i][j]<<" ";

    	}

    	cout<<endl;

	}

}

int main()

{

	cout << "enter the number of the nodes :" << endl;

	cin>>n;

	cout<<"enter the cost of the adjacency matrices:"<<endl;

	for(i=1;i<=n;i++){

    	for(j=1;j<=n;j++){

        	cin>>a[i][j];

    	}

	}

	warshall(a,n);

	return 0;

}

 

 

 

 

 

FLYODS

#include<bits/stdc++.h>
int cost[10][10],d[10][10],n;

int min(int a,int b)

{

                	if(a<=b)

                                    	return a;

                	else

                                    	return b;

}

void floyd(int n, int cost[10][10],int d[10][10])

{

                	int i,j,k;

                	int chunck=5;

                	for(i=0;i<n;i++)

                                    	for(j=0;j<n;j++)

                                    	{

                                                        	d[i][j]=cost[i][j];

                                    	}

                	#pragma omp parallel section

                	{

                                    	#pragma omp for shedule(dynamic,chunck)

                                    	for(k=0;k<n;k++)

                                    	{

                                                        	for(i=0;i<n;i++)

                                                        	{

                                                                                                	for(j=0;j<n;j++)

                                                                                                	{

                                                                                                                    	d[i][j]=min(d[i][j],d[i][k]+d[k][j]);

                                                                                                	}

                                                        	}

                                    	}

                	}

                	for(i=0;i<n;i++)

                	{

                                    	for(j=0;j<n;j++)

                                    	{

                                                        	printf("%5d\t",d[i][j]);

                                    	}

                                    	printf("\n");

                	}

}

void read_adjacency_matrix(int n,int a[10][10])

{

                	int i,k,j;

                	for(i=0;i<n;i++)

                                    	for(j=0;j<n;j++)

                                    	{

                                                        	scanf("%d",&a[i][j]);

                                    	}

}

int sleep(clock_t h)

{

                	clock_t w=0;

                	do

                	{

                                    	w++;

                	}

                	while(w<=h);

}

 

int main()

{

                	int i,j,cost[10][10],d[10][10],n;

                	clock_t start,end;

                	printf("enter no of nodes\n");

                	scanf("%d",&n);

                	printf("enter cost adjacecny matrix:\n");

                	read_adjacency_matrix(n,cost);

                	start=clock();

                	sleep((clock_t)100*CLOCKS_PER_SEC);

                	printf("solution to all pairs problem\n");

                	floyd(n,cost,d);

                	end=clock();

                	printf("time taken is %f\n",(float)(end-start)/CLOCKS_PER_SEC);

}

 

 

 

#include <iostream>

 

using namespace std;

int min(int a,int b){

if(a<b){

	return a;

}

else{

	return b;

}

}

void floyd(int a[20][20],int n){

int d[20][20],i,j,k;

	for(i=1;i<=n;i++){

        	for(j=1;j<=n;j++){

            	d[i][j]=a[i][j];

        	}

 

	}

	for(k=1;k<=n;k++){

	for(i=1;i<=n;i++){

    	    for(j=1;j<=n;j++){

            	d[i][j]=min(d[i][j], d[i][k]+d[k][j]);

        	}

 

	}

	}

	cout<<"dispalying the final matrix:\n"<<endl;

	for(i=1;i<=n;i++){

        	for(j=1;j<=n;j++){

                cout<<d[i][j]<<"    ";

    	    }

        	cout<<endl;

 

	}

 

}

int main()

{

	int n,i,j,a[20][20];

	cout << "Enter the number of the nodes: " << endl;

	cin>>n;

	cout<<"enter the cost of adjacency matrices: "<<endl;

	for(i=1;i<=n;i++){

        	for(j=1;j<=n;j++){

            	cin>>a[i][j];

        	}

 

	}

	floyd(a,n);

	return 0;

}

  

 

 

 

 

 

 

 

 

 

 

 

 

 NQUEEN

#include<iostream>

#include<math.h>

using namespace std;

void nqueens(int);

int place(int[],int);

void printsolution(int,int[]);

 

 

int main()

{

    	int n;

    	cout<<"Enter the no.of queens:";

    	cin>>n;

    	nqueens(n);

}

void nqueens(int n)

    	{

    	int x[10],count=0,k=1;

    	x[k]=0;

    	while(k!=0)

        	{

      	  x[k]=x[k]+1;

                 while(x[k]<=n && (!place(x,k)))

        	x[k]=x[k]+1;

        	if(x[k]<=n)

            	{

                	if(k==n)

                	{

                    	count++;

                        cout<<"\nSolution"<<count<<"\n";

                    	printsolution(n,x);

                	}

                	else

                	{

                    	k++;

                    	x[k]=0;

                	}

            	}

        	else

            	{

            	k--;

            	}

        	}

}

int place(int x[],int k)

{

    	int i;

    	for(i=1;i<k;i++)

            if(x[i]==x[k]||(abs(x[i]-x[k]))==abs(i-k))

            	return 0;

    	return 1;

}

void printsolution(int n,int x[])

{

    	int i,j;

    	char c[10][10];

    	for(i=1;i<=n;i++)

        	{

            	for(j=1;j<=n;j++)

                	c[i][j]='X';

        	}

    	for(i=1;i<=n;i++){

        	c[i][x[i]]='Q';

    	}

    	for(i=1;i<=n;i++)

        	{

        	for(j=1;j<=n;j++)

            	{

                cout<<c[i][j]<<"\t";

            	}

        	cout<<"\n";

        	}

}

 

 

 

 

BFS

 
#include <iostream>
using namespace std;

int visited[20],source,n,i,j,a[20][20];

void BFS(int a[20][20], int source,int visited[],int n){

int queue[20],f,r,u,v;

f=0;

r=-1;

queue[++r]=source;

 

while(f<=r){

	u=queue[f++];

	for(v=1;v<=n;v++){

    	if(a[u][v]==1 && visited[v]==0){

        	queue[++r]=v;

        	visited[v]=1;

    	}

	}

 

}

}

int main()

{

	cout << "Enter the number of the nodes: " << endl;

	cin>>n;

	cout<<"Enter the cost of the adjacency matrices:"<<endl;

	for(i=1;i<=n;i++){

    	for(j=1;j<=n;j++){

        	cin>>a[i][j];    	}

	}

	for(i=1;i<=n;i++){

    	visited[i]=0;

	}

	cout << "Enter the source node: " << endl;

	cin>>source;

	visited[source]=1;

	BFS(a,source, visited,n);

	for(i=1;i<=n;i++){

    	if(visited[i]!=0){

            cout<<"node"<<i<<" is reachable"<<endl;

    	}

    	else{

            cout<<"node"<<i<<" is not reachable"<<endl;

    	}

	}

	return 0;

}



 
 
 
 
 
 
 
 
 
 DFS

 #include <iostream>
using namespace std;

int i,j,n,a[20][20],visited[20],source;

void DFS(int a[20][20],int u,int visited[] ,int n){

int v;

visited[u]=1;

for(v=1;v<=n;v++){

	if( a[u][v]==1 && visited[v]==0 ){

    	DFS(a,v,visited,n);

	}

}

}

 

int main()

{

	cout << "Enter the number of the nodes: " << endl;

	cin>>n;

	cout<<"Enter the adjacency matrices :"<<endl;

	for(i=1;i<=n;i++){

        	for(j=1;j<=n;j++){

            	cin>>a[i][j];

        	}

	}

	for(i=1;i<=n;i++){

    	visited[i]=0;

	}

	cout<<"enter the source:"<<endl;

	cin>>source;

	DFS(a,source,visited,n);

	for(i=1;i<=n;i++){

    	if(visited[i]==0){

        	cout<<"graph is not connencted"<<endl;

        	exit(0);

    	}

	}

    	cout<<"Graph is  connected"<<endl;

	return 0;

}

 






 

 

 

 






SALES MAN


#include<stdio.h>

int a[10][10],n,visit[10];

int cost_opt=0,cost_apr=0;

int least_apr(int c);

int least_opt(int c);

 

void mincost_opt(int city)

{

            int i,ncity;

            visit[city]=1;

            printf("%d-->",city);

            ncity=least_opt(city);

            if(ncity==999)

            {

                        ncity=1;

                        printf("%d",ncity);

                        cost_opt+=a[city][ncity];

                        return;

            }

            mincost_opt(ncity);

}

 void mincost_apr(int city)

 {

            int i,ncity;

            visit[city]=1;

            printf("%d-->",city);

            ncity=least_apr(city);

            if(ncity==999)

            {

                        ncity=1;

                        printf("%d",ncity);

                        cost_apr+=a[city][ncity];

                        return;

            }

            mincost_apr(ncity);

}

 

int least_opt(int c)

{

            int i,nc=999;

            int min=999,kmin=999;

            for(i=1;i<=n;i++)

            {

                        if((a[c][i]!=0)&&(visit[i]==0))

                        if(a[c][i]<min)

                        {

                                    min=a[i][1]+a[c][i];

                                    kmin=a[c][i];

                                    nc=i;

                        }

            }

            if(min!=999)

                        cost_opt+=kmin;

            return nc;

}

 

int least_apr(int c)

{

            int i,nc=999;

            int min=999,kmin=999;

for(i=1;i<=n;i++)

            {

                        if((a[c][i]!=0)&&(visit[i]==0))

                                    if(a[c][i]<kmin)

                                    {

                                                min=a[i][1]+a[c][i];

                                                kmin=a[c][i];

                                                nc=i;

                                    }

            }

            if(min!=999)

                        cost_apr+=kmin;

            return nc;

}

 void main()

{

            int i,j;

            printf("Enter No. of cities:\n");

            scanf("%d",&n);

 

            printf("Enter the cost matrix\n");

            for(i=1;i<=n;i++)

            {

                        printf("Enter elements of row:%d\n",i );

                        for(j=1;j<=n;j++)

                                	scanf("%d",&a[i][j]);

                        visit[i]=0;

            }

            printf("The cost list is \n");

            for(i=1;i<=n;i++)

            {

                        printf("\n\n");

                        for(j=1;j<=n;j++)

                                    printf("\t%d",a[i][j]);

            }

            printf("\n\n Optimal Solution :\n");

            printf("\n The path is :\n");

            mincost_opt(1);

            printf("\n Minimum cost:");

            printf("%d",cost_opt);

 

            printf("\n\n Approximated Solution :\n");

            for(i=1;i<=n;i++)

                        visit[i]=0;

            printf("\n  The path is :\n");

            mincost_apr(1);

            printf("\nMinimum cost:");

            printf("%d",cost_apr);

            printf("\n\nError in approximation is approximated solution/optimal solution=%f",

                        (float)cost_apr/cost_opt);

}

*/
